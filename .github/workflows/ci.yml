name: CI

on:
  push:
    branches:
      - main
      - master
  pull_request:

permissions:
  contents: read
  pages: write
  id-token: write

env:
  CI_IMAGE: ghcr.io/${{ github.repository_owner }}/viewer-ci:latest

defaults:
  run:
    shell: bash

jobs:
  ruff:
    name: Ruff
    runs-on: ubuntu-latest
    container:
      image: ${{ env.CI_IMAGE }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Ruff
        run: ruff check .

  pylint:
    name: Pylint
    runs-on: ubuntu-latest
    container:
      image: ${{ env.CI_IMAGE }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Pylint
        run: pylint --errors-only .

  mypy:
    name: Mypy
    runs-on: ubuntu-latest
    container:
      image: ${{ env.CI_IMAGE }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run mypy
        run: mypy

  test-index:
    name: Test Index Validation
    runs-on: ubuntu-latest
    container:
      image: ${{ env.CI_IMAGE }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate test index
        run: python generate_test_index.py

      - name: Check if test index is up to date
        run: |
          if ! git diff --exit-code TEST_INDEX.md; then
            echo "Error: TEST_INDEX.md is out of date!"
            echo "Please run 'python generate_test_index.py' and commit the changes."
            exit 1
          fi
          echo "Test index is up to date."

  unit-tests:
    name: Unit Tests and Coverage
    runs-on: ubuntu-latest
    container:
      image: ${{ env.CI_IMAGE }}
    env:
      DATABASE_URL: sqlite:////tmp/secureapp-ci.db
      SESSION_SECRET: test-secret-key
      TESTING: "True"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run tests with coverage
        id: run_tests
        run: |
          ./test-unit --coverage --summary-file coverage-report.txt
        continue-on-error: true

      - name: Publish coverage summary
        id: coverage
        if: always()
        run: |
          if [ -f "coverage-report.txt" ]; then
            cat coverage-report.txt
            {
              echo "### Coverage summary"
              echo '```'
              cat coverage-report.txt
              echo '```'
            } >> "$GITHUB_STEP_SUMMARY"
            echo "generated=true" >> "$GITHUB_OUTPUT"
          else
            echo "No coverage data found. Tests may not have run." | tee coverage-report.txt
            {
              echo "### Coverage summary"
              echo
              echo "No coverage data was generated."
            } >> "$GITHUB_STEP_SUMMARY"
            echo "generated=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Upload coverage XML
        if: always() && steps.coverage.outputs.generated == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml
          path: coverage.xml

      - name: Upload HTML coverage report
        if: always() && steps.coverage.outputs.generated == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: unit-tests-html
          path: htmlcov

      - name: Fail if tests failed
        if: steps.run_tests.outcome == 'failure'
        run: exit 1

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    container:
      image: ${{ env.CI_IMAGE }}
    env:
      DATABASE_URL: sqlite:////tmp/secureapp-ci.db
      SESSION_SECRET: test-secret-key
      TESTING: "True"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run integration tests
        id: run_integration
        run: |
          set -o pipefail
          python run_integration_tests.py -- --junitxml=integration-tests-report.xml | tee integration-tests.log
        continue-on-error: true

      - name: Publish integration summary
        if: always()
        run: |
          if [ -f integration-tests.log ]; then
            {
              echo "### Integration tests"
              echo
              echo '```'
              tail -n 50 integration-tests.log
              echo '```'
              echo
              echo "JUnit XML: integration-tests-report.xml"
            } >> "$GITHUB_STEP_SUMMARY"
          else
            {
              echo "### Integration tests"
              echo
              echo "No integration test log was produced."
            } >> "$GITHUB_STEP_SUMMARY"
          fi

      - name: Upload integration test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-tests-results
          path: |
            integration-tests-report.xml
            integration-tests.log

      - name: Fail if integration tests failed
        if: steps.run_integration.outcome == 'failure'
        run: exit 1

  gauge-specs:
    name: Gauge Specs
    runs-on: ubuntu-latest
    container:
      image: ${{ env.CI_IMAGE }}
    env:
      DATABASE_URL: sqlite:////tmp/secureapp-ci.db
      SESSION_SECRET: test-secret-key
      TESTING: "True"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Gauge specs
        id: run_gauge
        run: ./test-gauge
        env:
          GAUGE_PYTHON_COMMAND: python3
          STEP_IMPL_DIR: "${{ github.workspace }}/step_impl"
          PYTHONPATH: "${{ github.workspace }}:${{ github.workspace }}/step_impl:${{ github.workspace }}/tests"
        continue-on-error: true

      - name: Upload Gauge HTML report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: gauge-html
          path: reports/html-report
          if-no-files-found: warn

      - name: Fail if Gauge specs failed
        if: steps.run_gauge.outcome == 'failure'
        run: exit 1

  deploy-reports:
    name: Publish Test Reports
    needs:
      - unit-tests
      - integration-tests
      - gauge-specs
    if: >-
      ${{ github.event_name == 'push' &&
          github.ref == 'refs/heads/main' &&
          needs['unit-tests'].result == 'success' &&
          needs['integration-tests'].result == 'success' &&
          needs['gauge-specs'].result == 'success' }}
    runs-on: ubuntu-latest
    container:
      image: ${{ env.CI_IMAGE }}
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Download unit test report
        uses: actions/download-artifact@v4
        with:
          name: unit-tests-html
          path: site/unit-tests

      - name: Download Gauge report
        uses: actions/download-artifact@v4
        with:
          name: gauge-html
          path: site/gauge-specs

      - name: Download integration test results
        uses: actions/download-artifact@v4
        with:
          name: integration-tests-results
          path: site/integration-tests

      - name: Prepare site content
        run: |
          mkdir -p site/unit-tests site/gauge-specs site/integration-tests
          if [ -d site/unit-tests/htmlcov ]; then
            mv site/unit-tests/htmlcov/* site/unit-tests/
            rmdir site/unit-tests/htmlcov
          fi
          if [ -d site/gauge-specs/reports/html-report ]; then
            mv site/gauge-specs/reports/html-report/* site/gauge-specs/
            rm -rf site/gauge-specs/reports
          fi
          python3 <<'PY'
          from html import escape
          from pathlib import Path

          from tests.gauge_report import enhance_gauge_report
          
          base = Path("site/integration-tests")
          base.mkdir(parents=True, exist_ok=True)
          
          log_path = base / "integration-tests.log"
          xml_path = base / "integration-tests-report.xml"
          index_path = base / "index.html"
          
          log_content = "No log output was captured."
          if log_path.exists():
              log_content = escape(log_path.read_text())
          
          xml_link = ""
          if xml_path.exists():
              xml_link = '<p><a href="integration-tests-report.xml">Download the JUnit XML report</a></p>'
          
          index_path.write_text(
              """<!DOCTYPE html>
          <html lang=\"en\">
          <head>
            <meta charset=\"utf-8\" />
            <title>Integration test results</title>
            <style>
              body {{ font-family: system-ui, sans-serif; margin: 2rem; line-height: 1.6; }}
              pre {{ background: #f6f8fa; padding: 1rem; border-radius: 6px; overflow-x: auto; }}
              a {{ color: #0366d6; text-decoration: none; }}
              a:hover {{ text-decoration: underline; }}
            </style>
          </head>
          <body>
            <h1>Integration test results</h1>
            {xml_link}
            <h2>Latest log excerpt</h2>
            <pre>{log_content}</pre>
          </body>
          </html>
          """.format(xml_link=xml_link, log_content=log_content)
          )
          enhance_gauge_report(Path("site/gauge-specs"))
          PY
          cat <<'HTML' > site/index.html
          <!DOCTYPE html>
          <html lang="en">
          <head>
            <meta charset="utf-8" />
            <title>SecureApp Test Reports</title>
            <style>
              body { font-family: system-ui, sans-serif; margin: 2rem; line-height: 1.6; }
              h1 { font-size: 2rem; margin-bottom: 1rem; }
              ul { list-style: disc; padding-left: 1.5rem; }
              a { color: #0366d6; text-decoration: none; }
              a:hover { text-decoration: underline; }
            </style>
          </head>
          <body>
            <h1>SecureApp Test Reports</h1>
            <ul>
              <li><a href="unit-tests/index.html">Unit test coverage report</a></li>
              <li><a href="integration-tests/index.html">Integration test results</a></li>
              <li><a href="gauge-specs/index.html">Gauge HTML report</a></li>
            </ul>
          </body>
          </html>
          HTML

      - name: Upload artifact for GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: site

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
