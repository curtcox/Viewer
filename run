#!/bin/bash

# SecureApp Run Script
# Starts the application in development or production mode

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

echo "ðŸš€ SecureApp Runner"
echo "=================="

# Check if .env file exists
if [[ ! -f ".env" ]]; then
    print_error ".env file not found"
    print_error "Copy .env.sample to .env and configure it first"
    exit 1
fi

# Load environment variables
source .env

# Set default values
HOST=${HOST:-"0.0.0.0"}
PORT=${PORT:-"5000"}
MODE=${1:-"development"}

# Check if virtual environment exists and activate it
if [[ -d "venv" ]]; then
    if [[ "$VIRTUAL_ENV" == "" ]]; then
        print_info "Activating virtual environment..."
        source venv/bin/activate
        print_success "Virtual environment activated"
    else
        print_info "Virtual environment already active"
    fi
else
    print_warning "Virtual environment not found, using system Python"
fi

# Determine Python command
if command -v python3 &> /dev/null; then
    PYTHON_CMD="python3"
elif command -v python &> /dev/null; then
    PYTHON_CMD="python"
else
    print_error "Python not found"
    exit 1
fi

# Quick health check
print_info "Running quick health check..."
HEALTH_CHECK_FAILED=false

# Check if required packages are installed
if ! $PYTHON_CMD -c "import flask" &> /dev/null; then
    print_error "Flask not installed. Run './install' first"
    HEALTH_CHECK_FAILED=true
fi

# Check if database URL is set
if [[ -z "$DATABASE_URL" ]]; then
    print_error "DATABASE_URL not set in .env file"
    HEALTH_CHECK_FAILED=true
fi

# Check if session secret is set
if [[ -z "$SESSION_SECRET" ]]; then
    print_error "SESSION_SECRET not set in .env file"
    HEALTH_CHECK_FAILED=true
fi

if [[ "$HEALTH_CHECK_FAILED" == "true" ]]; then
    print_error "Health check failed. Run './doctor' for detailed diagnostics"
    exit 1
fi

print_success "Health check passed"

# Create database tables if they don't exist
print_info "Ensuring database tables exist..."
$PYTHON_CMD -c "
from app import app, db
with app.app_context():
    try:
        db.create_all()
        print('Database tables ready')
    except Exception as e:
        print(f'Database error: {e}')
        exit(1)
" || {
    print_error "Failed to create database tables"
    print_error "Check your DATABASE_URL and ensure PostgreSQL is running"
    exit 1
}

# Display startup information
echo
print_info "Starting SecureApp..."
print_info "Mode: $MODE"
print_info "Host: $HOST"
print_info "Port: $PORT"
print_info "Database: ${DATABASE_URL/\/\/.*@/\/\/***@}"  # Hide credentials in output
echo

# Start the application based on mode
case $MODE in
    "development" | "dev")
        print_info "Starting in development mode..."
        print_warning "Development mode should not be used in production!"
        export FLASK_ENV=development
        export FLASK_DEBUG=1
        $PYTHON_CMD main.py
        ;;
    "production" | "prod")
        print_info "Starting in production mode with Gunicorn..."
        if command -v gunicorn &> /dev/null; then
            exec gunicorn --bind $HOST:$PORT --reuse-port --reload main:app
        else
            print_error "Gunicorn not installed"
            print_error "Install with: pip install gunicorn"
            print_info "Falling back to development server..."
            $PYTHON_CMD main.py
        fi
        ;;
    "test")
        print_info "Starting in test mode..."
        export FLASK_ENV=testing
        $PYTHON_CMD main.py
        ;;
    *)
        print_error "Unknown mode: $MODE"
        print_error "Usage: ./run [development|production|test]"
        print_error "Default: development"
        exit 1
        ;;
esac