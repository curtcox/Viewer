#!/usr/bin/env python3
"""Run the unit test suite via pytest."""

from __future__ import annotations

import argparse
import subprocess
import sys
from collections.abc import Sequence

from test_support import ROOT_DIR, build_test_environment


def parse_arguments(argv: Sequence[str]) -> argparse.Namespace:
    parser = argparse.ArgumentParser(
        description="Run pytest with optional coverage reporting.",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )
    parser.add_argument(
        "--coverage",
        action="store_true",
        help="Execute the test suite with coverage enabled.",
    )
    parser.add_argument(
        "--summary-file",
        dest="summary_file",
        help="Write the textual coverage summary to the specified file (only with --coverage).",
    )
    parser.add_argument(
        "pytest_args",
        nargs=argparse.REMAINDER,
        help="Additional arguments forwarded to pytest (prefix with --).",
    )
    args = parser.parse_args(argv)
    if args.pytest_args and args.pytest_args[0] == "--":
        args.pytest_args = args.pytest_args[1:]
    return args


def run_with_coverage(env: dict[str, str], args: argparse.Namespace) -> int:
    command = [
        sys.executable,
        str(ROOT_DIR / "run_coverage.py"),
        "--all",
    ]
    if args.summary_file:
        command.extend(["--summary-file", args.summary_file])
    if args.pytest_args:
        command.append("--")
        command.extend(args.pytest_args)
    return subprocess.call(command, cwd=str(ROOT_DIR), env=env)


def run_pytest(env: dict[str, str], args: argparse.Namespace) -> int:
    command = [sys.executable, "-m", "pytest", *args.pytest_args]
    return subprocess.call(command, cwd=str(ROOT_DIR), env=env)


def main(argv: Sequence[str] | None = None) -> int:
    if argv is None:
        argv = sys.argv[1:]

    args = parse_arguments(list(argv))
    env = build_test_environment()

    if args.coverage:
        return run_with_coverage(env, args)

    return run_pytest(env, args)


if __name__ == "__main__":
    raise SystemExit(main())
