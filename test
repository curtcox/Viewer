#!/usr/bin/env python3
"""Run lint checks, unit tests, integration tests, and Gauge specifications."""

from __future__ import annotations

import argparse
import subprocess
import sys
from collections.abc import Sequence

from tests.gauge_report import enhance_gauge_report
from tests.test_support import ROOT_DIR, build_test_environment

_ALL_TARGETS = ("unit", "integration", "spec")


def parse_arguments(argv: Sequence[str]) -> tuple[list[str], list[str]]:
    parser = argparse.ArgumentParser(
        description="Run repository checks and test suites.",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )
    parser.add_argument(
        "targets",
        nargs="*",
        choices=_ALL_TARGETS,
        help="Specific test suites to run. Defaults to all suites when omitted.",
    )

    if "--" in argv:
        separator = argv.index("--")
        passthrough = list(argv[separator + 1 :])
        filtered = list(argv[:separator])
    else:
        passthrough = []
        filtered = list(argv)

    args = parser.parse_args(filtered)

    selected = list(dict.fromkeys(args.targets)) or list(_ALL_TARGETS)

    if passthrough and "unit" not in selected:
        parser.error("Additional pytest arguments require running the unit tests.")

    return selected, passthrough


def run_command(command: Sequence[str], env: dict[str, str]) -> int:
    return subprocess.call(command, cwd=str(ROOT_DIR), env=env)


def run_lint_checks(env: dict[str, str]) -> int:
    for command in (
        [sys.executable, "-m", "ruff", "check"],
        [sys.executable, "-m", "mypy"],
        [sys.executable, "-m", "pylint", "--errors-only", "--ignore-patterns=^$", "*.py"],
    ):
        result = run_command(command, env)
        if result != 0:
            return result
    return 0


def run_unit_tests(env: dict[str, str], extra_args: Sequence[str]) -> int:
    command = [str(ROOT_DIR / "test-unit")]
    if extra_args:
        command.append("--")
        command.extend(extra_args)
    return run_command(command, env)


def run_integration_tests(env: dict[str, str]) -> int:
    command = [str(ROOT_DIR / "run_integration_tests.py")]
    return run_command(command, env)


def run_spec_tests(env: dict[str, str]) -> int:
    command = [str(ROOT_DIR / "test-gauge")]
    result = run_command(command, env)
    if result == 0:
        try:
            enhance_gauge_report(ROOT_DIR / "reports" / "html-report")
        except Exception:  # noqa: BLE001 - best effort augmentation
            pass
    return result


def main(argv: Sequence[str] | None = None) -> int:
    if argv is None:
        argv = sys.argv[1:]

    targets, passthrough = parse_arguments(list(argv))
    env = build_test_environment()

    lint_result = run_lint_checks(env)
    if lint_result != 0:
        return lint_result

    for target in targets:
        if target == "unit":
            result = run_unit_tests(env, passthrough)
        elif target == "integration":
            result = run_integration_tests(env)
        elif target == "spec":
            result = run_spec_tests(env)
        else:  # pragma: no cover - defensive safeguard
            raise ValueError(f"Unknown test target: {target}")

        if result != 0:
            return result

    return 0


if __name__ == "__main__":
    raise SystemExit(main())
