#!/usr/bin/env python3
"""Run the project's test suite via pytest."""

from __future__ import annotations

import os
import subprocess
import sys
from collections.abc import Sequence
from pathlib import Path

ROOT_DIR = Path(__file__).resolve().parent
DEFAULT_ENV = {
    "DATABASE_URL": "sqlite:///:memory:",
    "SESSION_SECRET": "test-secret-key",
    "TESTING": "True",
}


def build_environment() -> dict[str, str]:
    """Return a copy of the current environment with sensible defaults."""

    env = os.environ.copy()
    # Ensure the repository root is on the Python path so pytest can import modules.
    python_path = env.get("PYTHONPATH")
    if python_path:
        env["PYTHONPATH"] = os.pathsep.join([str(ROOT_DIR), python_path])
    else:
        env["PYTHONPATH"] = str(ROOT_DIR)

    for key, value in DEFAULT_ENV.items():
        env.setdefault(key, value)

    return env


def main(args: Sequence[str]) -> int:
    env = build_environment()
    cmd = [sys.executable, "-m", "pytest", *args]
    return subprocess.call(cmd, cwd=str(ROOT_DIR), env=env)


if __name__ == "__main__":
    raise SystemExit(main(sys.argv[1:]))
